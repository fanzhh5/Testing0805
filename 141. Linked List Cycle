判环问题。
使用Turtoise & Hare Cycle Detection Algorithm（龟兔赛跑算法），或者叫Floyd Cycle Detection Algorithm（Floyd判圈法）。
https://www.cnblogs.com/TIMHY/p/8280725.html
Floyd判圈算法(Floyd Cycle Detection Algorithm)，又称龟兔赛跑算法(Tortoise and Hare Algorithm)，是一个可以在有限状态机、迭代函数或者链表上判断是否存在环，求出该环的起点与长度的算法。该算法据高德纳称由美国科学家罗伯特·弗洛伊德发明，但这一算法并没有出现在罗伯特·弗洛伊德公开发表的著作中。
如果有限状态机、迭代函数或者链表上存在环，那么在某个环上以不同速度前进的2个指针必定会在某个时刻相遇。同时显然地，如果从同一个起点(即使这个起点不在某个环上)同时开始以不同速度前进的2个指针最终相遇，那么可以判定存在一个环，且可以求出2者相遇处所在的环的起点与长度。
一、算法描述
如果有限状态机、迭代函数或者链表存在环，那么一定存在一个起点可以到达某个环的某处(这个起点也可以在某个环上)。
初始状态下，假设已知某个起点节点为节点S。现设两个指针t和h，将它们均指向S。
接着，同时让t和h往前推进，但是二者的速度不同：t每前进1步，h前进2步。只要二者都可以前进而且没有相遇，就如此保持二者的推进。
•	当h无法前进，即到达某个没有后继的节点时，就可以确定从S出发不会遇到环。
•	反之当t与h再次相遇时，就可以确定从S出发一定会进入某个环，设其为环C。
如果确定了存在某个环，就可以求此环的起点与长度。
环长度：上述算法刚判断出存在环C时，显然t和h位于同一节点，设其为节点M。显然，仅需令h不动，而t不断推进，最终又会返回节点M，统计这一次t推进的步数，显然这就是环C的长度。
环入口：为了求出环C的起点，只要令h仍均位于节点M，而令t返回起点节点S，此时h与t之间距为环C长度的整数倍。随后，同时让t和h往前推进，且保持二者的速度相同：t每前进1步，h前进1步。持续该过程直至t与h再一次相遇，设此次相遇时位于同一节点P，则节点P即为从节点S出发所到达的环C的第一个节点，即环C的一个起点。
环入口算法的证明：
 
假设慢指针到相遇点的距离为l，x为链起点到入口的距离，环的长度为r，则快指针的路程为2l。 
l = x + y；
2l = l + nr；
==> nr = x + y
==> x = nr - y
那么此时，将相遇点的慢指针调到起始点，快指针行进速度和慢指针保持一致，那么当慢指针走了x的路程时，快指针走了nr - y，正好两者在环的入口处相遇。
代码：
        pH = pT = head
        while pH and pH.next:
            pT = pT.next
            pH = pH.next.next
            if pH == pT: return True
        return False
